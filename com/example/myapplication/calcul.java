package com.example.myapplication;

import java.util.Scanner;

public class calcul {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // Вводим выражение, отправляет выражение в функцию calc() и выводим то, что функция вернула
        System.out.println(calc(in.nextLine()));
    }

    public static String calc(String input) {
        // Содержимое переменной str является результатом работы функции
        String res;

        // В блоке try отлавливаются все выброшенные исключения
        try {
            // Делим строку на список, состоящий из двух операндов и одного оператора
            // input.split("\\s+") разделит строку на раздельные операнды и операторы,
            // несмотря на количество пробелов между ними (кроме нуля пробелов)
            String[] list = input.split("\\s+");

            // Если в списке больше или меньше операндов и операторов, то выбрасывается исключение
            if (list.length != 3) throw new Exception("Некорректная математическая операции");

            // Нужно работать либо только с арабскими, либо с только с римскими числами.
            // Поэтому мы смотрим, какой первый символ у первого операнда с помощью функции charAt(0)
            // Если этот символ - буква, то следующий операнд и результат должны быть римскими числами,
            // иначе - арабскими числами
            boolean rimmode = Character.isLetter(list[0].charAt(0));
            // Отправляем 2 операнда и режим работы калькулятора в функцию parsenum()
            // Из этой функции нам вернется представление числа,
            // римского при rimmode = true и арабского при rimmode = false.
            // Иначе будет выброшено исключение
            int i1 = parsenum(list[0], rimmode);
            int i2 = parsenum(list[2], rimmode);

            // В переменной res_num будет находиться результат вычисления в привычной форме,
            // чтобы в дальнейшем преобразовать его в строку символов
            int res_num;
            // Мы проверяем оператор и выполняем соответствующие оператору действия с двумя операндами
            switch (list[1]) {
                case "+" -> res_num = i1 + i2;
                case "-" -> res_num = i1 - i2;
                case "*" -> res_num = i1 * i2;
                case "/" -> res_num = i1 / i2;
                // Если оператор не соответствует вариантам операторов выше, то выбрасывается исключение
                default -> throw new Exception("Неправильный оператор (" + list[1] + ")");
            }

            // В соответствии с режимом работы находится калькулятор,
            // мы выводим число в нужной системе счисления
            if (rimmode) {
                // В режиме римских чисел нет нуля и отрицательных чисел
                if (res_num <= 0) throw new Exception("Результат - число, которое отсутствует в римской системе счисления (" + res_num + ")");
                // Тут число превращает в римское с помощью функции torim()
                res = torim(res_num);
            } else {
                // А тут число преобразовывается в строку, чтобы его можно было присвоить переменной str
                res = Integer.toString(res_num);
            }
        }
        // В блоке catch мы обрабатываем выброшенное исключение.
        // Обработка происходит сразу после выброса исключения и выполнение функции
        // продолжается не в месте выброса, а после блока catch
        catch (Exception e) {
            // В данном случае, мы присваиваем переменной результата текст ошибки в формате "ОШИБКА: текст_ошибки"
            res = "ОШИБКА: " + e.getMessage();
        }
        // Возвращаем результат: число, арабское или римское, при корректном завершении работы функции,
        // или текст ошибка
        return res;
    }

    public static int parsenum(String num, boolean rimmode) throws Exception {
        int n;
        // Калькулятор не работает с отрицательными числами - выбрасываем исключение
        if (num.charAt(0) == '-') throw new Exception("Используются отрицательные числа (" + num + ")");
        // Отправляем число в parsearab(), если первый символ - цифра и режим работы калькулятора - арабские числа
        else if (Character.isDigit(num.charAt(0)) && !rimmode) n = parsearab(num);
        // Отправляем число в parserim(), если первый символ - буква и режим работы калькулятора - римские числа
        else if (Character.isLetter(num.charAt(0)) && rimmode) n = parserim(num);
        // Если первый символ - не число и не буква, то это не число - не римское и не арабское
        else if (!Character.isLetter(num.charAt(0)) && !Character.isDigit(num.charAt(0)))
            throw new Exception("В качестве числа использованы некорректные символы (" + num + ")");
        // Если первый символ и режим работы не соответствуют друг другу, то это означает,
        // что использованы разные системы счисления
        else throw new Exception("Используются разные системы счисления одновременно");
        // Возвращаем результат работы функции - число в привычном представлении
        return n;
    }

    public static int parsearab(String num) throws Exception {
        int n;
        try {
            // Integer.parseInt() превращает строку в целочисленное число
            n = Integer.parseInt(num);
            // Однако, если строка не может быть представлено в виде целочисленного числа,
            // то будет выброшено исключение NumberFormatException.
            // Поэтому, нам нужно обработать это исключение и для этого заключаем эту строку кода в блок try,
            // и блоком catch ловим и обрабатываем это исключение
        } catch (NumberFormatException e) {
            throw new Exception("Неправильно введенный операнд (" + num + ")");
        }
        // Число должно быть от 1 до 10. При 0 и >10 мы выбрасываем исключение.
        // Отрицательные числа были обработаны ранее
        if (n == 0 || n > 10) throw new Exception("Число выходит за пределы диапазона [1 - 10] (" + num + ")");
        return n;
    }

    public static int parserim(String num) throws Exception {
        // т.к набор чисел мал, их можно перебрать
        // return switch позволит сравнивать переменную со списком значений и вернуть определенное значение из функции
        return switch (num) {
            case "I" -> 1;
            case "II" -> 2;
            case "III" -> 3;
            case "IV" -> 4;
            case "V" -> 5;
            case "VI" -> 6;
            case "VII" -> 7;
            case "VIII" -> 8;
            case "IX" -> 9;
            case "X" -> 10;
            // Если число не соответствует набору римских чисел, то выбрасываем исключение
            default -> throw new Exception("Римское число введено неправильно или выходит за пределы диапазона [1 - 10] (" + num + ")");
        };
    }

    public static String torim(int num) {
        // Максимально возможное число, которое можно сюда передать - 100.
        // Число, которое имеет 3 разряда
        if (num == 100) return "С";
        // В зависимости от количества десятков и единиц в числах мы собираем наше римское число
        String t = switch (num / 10) {
            case 1 -> "X";
            case 2 -> "XX";
            case 3 -> "XXX";
            case 4 -> "XL";
            case 5 -> "L";
            case 6 -> "LX";
            case 7 -> "LXX";
            case 8 -> "LXXX";
            case 9 -> "XС";
            default -> "";
        };
        String d = switch (num % 10) {
            case 1 -> "I";
            case 2 -> "II";
            case 3 -> "III";
            case 4 -> "IV";
            case 5 -> "V";
            case 6 -> "VI";
            case 7 -> "VII";
            case 8 -> "VIII";
            case 9 -> "IX";
            default -> "";
        };
        // И возвращаем это число
        return t+d;
    }
}
